plugins {
    id "java"
    id "org.openapi.generator" version "5.0.0"
    id "org.beryx.runtime" version "1.12.1"
}

group "ru.craftysoft"
version "1.0.0"

dependencies {
    implementation(
            project(":util-lib:reactor-netty-module"),
            project(":util-lib:db-module"),
            project(":error-lib"),
            project(":db"),

            "io.swagger:swagger-annotations:1.6.2",
    )
    compileOnly("org.projectlombok:lombok")

    testImplementation(
            "org.junit.jupiter:junit-jupiter:5.7.0",
            "org.assertj:assertj-core:3.18.1",
            "org.mockito:mockito-core:3.6.28",
    )
    [
            project(":util-lib:common-module"),
            "com.google.dagger:dagger-compiler:2.31.1",
            "org.projectlombok:lombok:1.18.16",
            "org.hibernate.validator:hibernate-validator-annotation-processor:7.0.0.Final",
    ].forEach {
        annotationProcessor(it)
        testAnnotationProcessor(it)
    }
}

def generatedFilesPath = "$projectDir/build/generated/sources"
def generatedOpenapiFilesPath = "$generatedFilesPath/openapi"

task generateRestApiWrap() {
    def openapiInputFolder = "$projectDir/src/main/resources/openapi/self"
    def openapiInputSpec = "$openapiInputFolder/demo-service.yaml"
    inputs.file("$openapiInputSpec")
    outputs.dir("$generatedOpenapiFilesPath")
    doLast {
        task generateRestApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
            generatorName = "jaxrs-jersey"
            inputSpec = "$openapiInputSpec"
            templateDir = "$openapiInputFolder"
            outputDir = "$generatedOpenapiFilesPath"
            modelPackage = "ru.craftysoft.demoservice.model"
            generateModelTests = false
            configOptions = [
                    openApiNullable: "false",
                    dateLibrary    : "java8",
                    interfaceOnly  : "true",
            ]
            globalProperties = [
                    models: "" //в данном случае генерируются только DTO
            ]
        }
        generateRestApi.doWork()
    }
}

runtime {
    enableCds()
    addOptions("--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages")
    addModules("java.base", "java.naming", "java.xml", "jdk.unsupported", "java.sql")
    launcher {
        getJvmArgs().add("--enable-preview")
    }
}

application.getMainClass().set("ru.craftysoft.demoservice.Application")

sourceSets.main.java.srcDirs("$generatedOpenapiFilesPath/src/gen/java", "$generatedFilesPath/annotationProcessor/java/main")

tasks.withType(JavaCompile) {
    dependsOn(generateRestApiWrap)
    options.compilerArgs += "--enable-preview"
    options.compilerArgs += "-Xlint:preview"
    options.fork = true
    options.forkOptions.jvmArgs += "--enable-preview"
}

test {
    useJUnitPlatform {
        excludeEngines "junit-vintage"
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

repositories {
    jcenter()
    mavenCentral()
    gradlePluginPortal()
}
